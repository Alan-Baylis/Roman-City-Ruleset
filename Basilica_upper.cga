/**
 * File:    Basilica_upper.cga
 * Created: 29 Dec 2014 23:45:34 GMT
 * Author:  msaldana
 */



import col : "Colonnade.cga"			
import tex : "TexturesAssets.cga"	
import rf:   "Roof.cga" 	

#-------Scene Settings

@Group("SceneSettings",0)
attr elevation 	= 0

@Group("SceneSettings",0) @Range(-800,300)
attr YEAR		= 0

@Group("SceneSettings",0) @Range("OFF","ON")
attr Materials_View		= "OFF"
	const materials			= Materials_View == "ON"
	const noMaterials		= Materials_View == "OFF"

@Group("SceneSettings",0)@Range("HIGH","MED","LOW")
attr LOD					= "LOW"
	const highLOD 				= LOD == "HIGH"
	const medLOD				= LOD == "MED"
	const lowLOD				= LOD == "LOW"
	
#--------Materials
	
@Group ("Materials",1) @Range("Under Construction","Brick","Travertine", "Marble", "None", "Varied")
attr Material				= 	case noMaterials && YEAR >= start_date && YEAR <= end_date: "Varied"
								case materials && YEAR >= construction_start && YEAR <=construction_end: "Under Construction"
								case materials && YEAR >= brick_start && YEAR <=brick_end: "Brick"
								case materials && YEAR >= travertine_start && YEAR <=travertine_end: "Travertine"
								case materials && YEAR >= marble_start && YEAR <=marble_end: "Marble"
								else: "None"
								
	const constr				= Material == "Under Construction" 
	const brick					= Material == "Brick"
	const trav					= Material == "Travertine"
	const marble				= Material == "Marble"
	const noModel				= Material == "None"
		

const MaterialColor			= 	case constr: construction_color
								case brick: brick_color
								case trav: travertine_color
								case marble: marble_color							
								else: wall

#--------General
	
@Group("General",2)@Range("TUSCAN","DORIC","IONIC","CORINTHIAN")
attr order_						= "DORIC"
	const tuscan					= order_ == "TUSCAN"
	const doric						= order_ == "DORIC"
	const ionic						= order_ == "IONIC"
	const corinthian				= order_ == "CORINTHIAN"
	
@Group("General",2)@Range("TUSCAN","DORIC","IONIC","CORINTHIAN")
attr upper_order_						= "DORIC"

@Group("General",2)@Range("REPUBLICAN","IMPERIAL","MARKET")
attr type 						= "REPUBLICAN"
	const republican				= type == "REPUBLICAN"
	const imperial					= type == "IMPERIAL"
	const market					= type == "MARKET"

@Group("General",2)@Range("SHOPS", "NO_SHOPS")
attr with_shops					= "NO_SHOPS"
	const shops						= with_shops == "SHOPS"
	const noShops					= with_shops == "NO_SHOPS"
	
@Group("General",2)@Range("true","false")
attr back_entrance				= "false"

@Group("General",2)
attr porch_depth 				= aisle_width

#--------Base
	
@Group("Base",3)
attr steps						= 5	

@Group("Base",3)
attr step_depth 				= .35	

@Group("Base",3)
attr step_height 				= .2

@Group("Base",3)@Range("true","false")
attr showSteps					= "true"

const baseHeight 				= step_height*steps
				
#--------Colonnade

@Group("Colonnade",4)@Range("COLONNADE","ARCADE")
attr colonnadeType		= 	case republican: "COLONNADE" else: "ARCADE"							
	const columns		= colonnadeType == "COLONNADE"
	const arches		= colonnadeType == "ARCADE"

@Group("Colonnade",4)
attr column_diameter			= 	1

@Group("Colonnade",4)@Range("Front Side", "Both Sides", "Off")
attr showOrders					 	= "Front Side"
	const singleSide				= showOrders == "Front Side"
	const bothSides					= showOrders == "Both Sides"
	const ordersOff					= showOrders == "Off"
	
@Group("Colonnade",4)
attr plinthH					= 	case columns: 0 else:(columnSpacing+column_diameter)/2

@Group("Colonnade",4)
attr archWidth					= 	3

@Group("Colonnade",4)
attr columnSpacing				= 	case tuscan && columns: 	column_diameter*4
									case doric && columns: 		column_diameter*2.5
									case ionic && columns: 		column_diameter*5.5	
									case corinthian && columns: column_diameter*9
									case tuscan && arches: 		archColumnDiameter*4
									case doric && arches: 		archColumnDiameter*2.5
									case ionic && arches: 		archColumnDiameter*5.5	
									else: 						archWidth //archColumnDiameter*9

const archColumnDiameter		= archWidth/10
const columnHeight				= case columns:col.columnHeight 
									else: col.archH*.75
#--------Ground Floor

@Group("Ground Floor",5)
attr aisle_width				= columnSpacing

const groundFloorHeight 		= columnHeight+entablatureH
const entablatureH				= column_diameter*col.entablatureH
const railingH					= 1
								
#--------Upper Floor

const upperEntablatureH			= column_diameter*col.entablatureH
const upper_wall_height			= columnHeight*.75
const upper_baseWall			= case republican: 0 else: railingH+columnHeight*.22
const upper_railingH			=  case republican: 0 else: railingH

#--------Walls & Doors

const wallThickness 			= column_diameter+col.columnOffset
const doorD						= 0.4
const doorFrameW				= 0.4
const doorFrameH				= 0.6
const entranceFrameW			= doorFrameW+0.1


#--------Roof

const roofThickness 			= 0.5
const roof_angle				= 25
const roofBrickW 				= columnSpacing *0.25
const roofBrickH 				= columnSpacing *0.35

#--------Export (for FBX exports for Unity which have to be broken up due to too many vertices)

@Group("Export",6)
attr export						= 0

#--------Texture Size

const tile 						= columnHeight

#-------Time Periods

@Group ("Time Period",8) @Order(0) @Range(-800,300)
attr start_date	= 0
@Group ("Time Period",8) @Order(0) @Range(-800,300)
attr end_date	= 0
@Group ("Time Period",8) @Order(1) @Range(-800,300)
attr construction_start	= 0
@Group ("Time Period",8) @Order(2) @Range(-800,300)
attr construction_end	= 0
@Group ("Time Period",8) @Order(3) @Range(-800,300)
attr brick_start		= 0
@Group ("Time Period",8) @Order(4) @Range(-800,300)
attr brick_end			= 0
@Group ("Time Period",8) @Order(5) @Range(-800,300)
attr travertine_start	= 0
@Group ("Time Period",8) @Order(6) @Range(-800,300)
attr travertine_end		= 0
@Group ("Time Period",8) @Order(7) @Range(-800,300)
attr marble_start       = 0
@Group ("Time Period",8) @Order(8) @Range(-800,300)
attr marble_end			= 0

#-------Colors
@Group("Colors",9)
attr base					= case noMaterials || materials && noModel: "#CDC6AD" else: MaterialColor
@Group("Colors",9)@Range( "#EEEEEE", "#F5F5F5","#FFFFFF","#E0E0D1","#AAAAA0")
attr wall					= case noMaterials  || materials && noModel: 20% : "#EEEEEE" 20% : "#F5F5F5" 20% : "#FFFFFF" 20% : "#E0E0D1" else : "#AAAAA0" else: MaterialColor
@Group("Colors",9)
attr wood					= case noMaterials  || materials && noModel: "#40331B" else: MaterialColor
@Group("Colors",9)@Range( "#EEEEEE", "#F5F5F5","#FFFFFF","#E0E0D1","#AAAAA0")
attr column					= case noMaterials  || materials && noModel: 20% : "#EEEEEE" 20% : "#F5F5F5" 20% : "#FFFFFF" 20% : "#E0E0D1" else : "#AAAAA0" else: MaterialColor
@Group("Colors",9)
attr architrave				= case noMaterials  || materials && noModel: "#E8DCC5" else: MaterialColor
@Group("Colors",9)
attr frieze					= case noMaterials  || materials && noModel: "#EBD8B5" else: MaterialColor
@Group("Colors",9)
attr metopes				= case noMaterials  || materials && noModel: "#EBD8B5" else: MaterialColor
@Group("Colors",9)
attr triglyph				= case noMaterials  || materials && noModel: "#B5B59F" else: MaterialColor
@Group("Colors",9)
attr cornice				= case noMaterials  || materials && noModel: "#C9C0AD" else: MaterialColor
@Group("Colors",9)@Range("#A8763D", "#ff6600",  "#9E4F0E", "#B56A00", "#A3650D", "#AB6118")
attr roof					= case noMaterials  || materials && noModel: 15% : "#A8763D" 15% : "#9E4F0E" 15% : "#B56A00" 15% : "#A3650D" else : "#AB6118" else: MaterialColor
@Group ("Colors",9)
attr floor					= case noMaterials  || materials && noModel: "#A68F74" else: MaterialColor
@Group ("Colors",9)
attr ground					= case noMaterials  || materials && noModel: "#ADB38F" else: MaterialColor


const construction_color	= "#F7EB9E" 
const brick_color			= "#705C46" 
const travertine_color		= "#E2E8D1" 
const marble_color			= "#F79E9E"


////////////
///////START



UpperVolume -->
case republican:
	split(y){upper_wall_height: comp(f){side:Wall}
			|columnHeight:comp(f){side:[t(0,0,-column_diameter)UpperWindows]col.FirstFlushNoLast(column_diameter,columnSpacing)}
			|upperEntablatureH:comp(f){side:col.Entablature(columnSpacing,column_diameter)
										|top: Roof}
			}
else: 
	split(y){upper_baseWall: comp(f){side:Wall}
			|columnHeight:comp(f){side: s(scope.sx-col.archColumnBaseW,'1,'1)center(x)col.ArcadeStart}
			|upperEntablatureH:comp(f){side:col.Entablature(columnSpacing,column_diameter)
										|top: offset(-aisle_width)
											 comp(f){inside:split(y){aisle_width+wallThickness:Ceiling|~1: NIL|aisle_width+wallThickness: Ceiling}
											 		|border: Ceiling}
										}
			|upper_railingH: comp(f){side: Wall}
			|~1:NIL
										
			}

///////ROOF	

Ceiling -->
color(floor) tex.Block("floor",.5)
reverseNormals
color(roof) tex.Block("roof",4,24)								                       

Roof -->
	roofGable(roof_angle, 1)
	Roof1
	
Roof1 -->
	comp(f){bottom: NIL|vertical: Wall|top:  color(roof) rf.Roof(roofBrickW,roofBrickH)}

///////WALLS

Wall -->
	extrude (-wallThickness)
	tex.Block("wall", tile)
	
UpperWindows -->
case republican:
split(x){~columnSpacing:t(column_diameter,0,0)s(scope.sx-column_diameter,'1,'1)WindowWall
			|{~columnSpacing:WindowWall}*
			|~columnSpacing:s(scope.sx-column_diameter,'1,'1)WindowWall}
else: 
split(x){~archWidth:WindowWall
			|{~archWidth:WindowWall}*
			|~archWidth:WindowWall}

WindowWall -->
	split(x){~1: UpperWall
			|column_diameter: split(y){~1: UpperWall
									  |column_diameter*2: t(0,0,(-wallThickness+column_diameter)/2)color(wood)Window.
									  |~column_diameter: UpperWall}
			|~1: UpperWall}

UpperWall -->
	extrude (-wallThickness+column_diameter)
	tex.Block("wall", tile)

