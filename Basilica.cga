/**
 * File:    Basilica.cga
 * Created: 17 Feb 2014 11:38:21 GMT
 * Author:  Marie Saldana
 */

version "2013.1"

import bu  : "Basilica_upper.cga" (order_ = upper_order, column_diameter = upper_column_diameter, plinthH = upper_plinthH)
import col : "Colonnade.cga"			
import tex : "TexturesAssets.cga"	
import rf:   "Roof.cga" 	

#-------Scene Settings

@Group("SceneSettings",0)
attr elevation 	= 0

@Group("SceneSettings",0) @Range(-800,300)
attr YEAR		= 0

@Group("SceneSettings",0) @Range("OFF","ON")
attr Materials_View		= "OFF"
	const materials			= Materials_View == "ON"
	const noMaterials		= Materials_View == "OFF"

@Group("SceneSettings",0)@Range("HIGH","MED","LOW")
attr LOD					= "LOW"
	const highLOD 				= LOD == "HIGH"
	const medLOD				= LOD == "MED"
	const lowLOD				= LOD == "LOW"
	
#--------Materials
	
@Group ("Materials",1) @Range("Under Construction","Brick","Travertine", "Marble", "None", "Varied")
attr Material				= 	case noMaterials && YEAR >= start_date && YEAR <= end_date: "Varied"
								case materials && YEAR >= construction_start && YEAR <=construction_end: "Under Construction"
								case materials && YEAR >= brick_start && YEAR <=brick_end: "Brick"
								case materials && YEAR >= travertine_start && YEAR <=travertine_end: "Travertine"
								case materials && YEAR >= marble_start && YEAR <=marble_end: "Marble"
								else: "None"
								
	const constr				= Material == "Under Construction" 
	const brick					= Material == "Brick"
	const trav					= Material == "Travertine"
	const marble				= Material == "Marble"
	const noModel				= Material == "None"
		

const MaterialColor			= 	case constr: construction_color
								case brick: brick_color
								case trav: travertine_color
								case marble: marble_color							
								else: wall

#--------General
@Group("General",2)@Range("REPUBLICAN","IMPERIAL","MARKET")
attr type 						= "REPUBLICAN"
	const republican				= type == "REPUBLICAN"
	const imperial					= type == "IMPERIAL"
	const market					= type == "MARKET"
	
@Group("General",2)@Range("TUSCAN","DORIC","IONIC","CORINTHIAN")
attr order_						= "DORIC"
	const tuscan					= order_ == "TUSCAN"
	const doric						= order_ == "DORIC"
	const ionic						= order_ == "IONIC"
	const corinthian				= order_ == "CORINTHIAN"
	
@Group("General",2)@Range("TUSCAN","DORIC","IONIC","CORINTHIAN")
attr upper_order						= "TUSCAN"

@Group("General",2)@Range("SHOPS", "NO_SHOPS")
attr with_shops					= "NO_SHOPS"
	const shops						= with_shops == "SHOPS"
	const noShops					= with_shops == "NO_SHOPS"
	
@Group("General",2)@Range("true","false")
attr back_entrance				= "false"

@Group("General",2)
attr porch_depth 				= aisle_width

@Group("General",2)@Range("true","false")
attr showInterior				= "false"

#--------Base
	
@Group("Base",3)
attr steps						= 5	

@Group("Base",3)
attr extra_steps_down			= 0

@Group("Base",3)
attr step_depth 				= .35	

@Group("Base",3)
attr step_height 				= .2

@Group("Base",3)@Range("true","false")
attr showSteps					= "true"

const baseHeight 				= step_height*steps+step_height*extra_steps_down
				
#--------Colonnade

@Group("Colonnade",4)@Range("COLONNADE","ARCADE")
attr colonnadeType		= 	case republican: "COLONNADE" else: "ARCADE"							
	const columns		= colonnadeType == "COLONNADE"
	const arches		= colonnadeType == "ARCADE"
	
@Group("Colonnade",4)@Range("true","false")
attr noFrontColonnade	= "false"

@Group("Colonnade",4)
attr column_diameter			= 	case arches: archColumnDiameter else: 0.6

@Group("Colonnade",4)@Range("Front Side", "Both Sides", "Off")
attr showOrders					 	= "Front Side"
	const singleSide				= showOrders == "Front Side"
	const bothSides					= showOrders == "Both Sides"
	const ordersOff					= showOrders == "Off"
	
@Group("Colonnade",4)
attr plinthH					= 	case columns: 0 else:(columnSpacing+column_diameter)/2

@Group("Colonnade",4)
attr archWidth					= 	3

@Group("Colonnade",4)
attr columnSpacing				= 	case tuscan && columns: 	column_diameter*4
									case doric && columns: 		column_diameter*2.5
									case ionic && columns: 		column_diameter*5.5	
									case corinthian && columns: column_diameter*9
									case tuscan && arches: 		archColumnDiameter*4
									case doric && arches: 		archColumnDiameter*2.5
									case ionic && arches: 		archColumnDiameter*5.5	
									else: 						archColumnDiameter*9

const archColumnDiameter		= col.archColumnDiameter
const columnHeight				= case columns:col.columnHeight 
									else: col.archH
#--------Ground Floor

@Group("Ground Floor",5)
attr aisle_width				= columnSpacing

const groundFloorHeight 		= columnHeight+entablatureH+railingH
const entablatureH				= column_diameter*col.entablatureH
const railingH					= 1
								
#--------Upper Floor

const upperFloorHeight 			= upper_wall_height+upper_baseWall+upper_column_height+upperEntablatureH+upper_railingH
const upper_column_height		= bu.columnHeight
const upper_column_diameter		= column_diameter*.75 
const upperColumnSpacing		= bu.columnSpacing
const upperEntablatureH			= upper_column_diameter*col.entablatureH
const upper_wall_height			= upper_column_height*.75
const upper_baseWall			= case republican: 0 else: railingH+upper_column_height*.22
const upper_plinthH				= case columns: 0 else:(bu.columnSpacing*.75+upper_column_diameter)/2
const upper_railingH			= case republican: 0 else: railingH

#--------Walls & Doors

const wallThickness 			= column_diameter+col.columnOffset
const doorD						= 0.4
const doorFrameW				= 0.4
const doorFrameH				= 0.6
const entranceFrameW			= doorFrameW+0.1


#--------Roof

@Group("Roof",6)@Range("Flat", "Angled")
attr roofType					= "Flat"

const roofThickness 			= 0.5
const roof_angle				= 20
const roofBrickW 				= columnSpacing *0.25
const roofBrickH 				= columnSpacing *0.35

#--------Texture Size

const tile 						= columnHeight

#-------Time Periods

@Group ("Time Period",8) @Order(0) @Range(-800,300)
attr start_date	= 0
@Group ("Time Period",8) @Order(0) @Range(-800,300)
attr end_date	= 0
@Group ("Time Period",8) @Order(1) @Range(-800,300)
attr construction_start	= 0
@Group ("Time Period",8) @Order(2) @Range(-800,300)
attr construction_end	= 0
@Group ("Time Period",8) @Order(3) @Range(-800,300)
attr brick_start		= 0
@Group ("Time Period",8) @Order(4) @Range(-800,300)
attr brick_end			= 0
@Group ("Time Period",8) @Order(5) @Range(-800,300)
attr travertine_start	= 0
@Group ("Time Period",8) @Order(6) @Range(-800,300)
attr travertine_end		= 0
@Group ("Time Period",8) @Order(7) @Range(-800,300)
attr marble_start       = 0
@Group ("Time Period",8) @Order(8) @Range(-800,300)
attr marble_end			= 0

#-------Colors
@Group("Colors",9)
attr base					= case noMaterials || materials && noModel: "#CDC6AD" else: MaterialColor
@Group("Colors",9)@Range( "#EEEEEE", "#F5F5F5","#FFFFFF","#E0E0D1","#AAAAA0")
attr wall					= case noMaterials  || materials && noModel: 20% : "#EEEEEE" 20% : "#F5F5F5" 20% : "#FFFFFF" 20% : "#E0E0D1" else : "#AAAAA0" else: MaterialColor
@Group("Colors",9)
attr wood					= case noMaterials  || materials && noModel: "#40331B" else: MaterialColor
@Group("Colors",9)@Range( "#EEEEEE", "#F5F5F5","#FFFFFF","#E0E0D1","#AAAAA0")
attr column					= case noMaterials  || materials && noModel: 20% : "#EEEEEE" 20% : "#F5F5F5" 20% : "#FFFFFF" 20% : "#E0E0D1" else : "#AAAAA0" else: MaterialColor
@Group("Colors",9)
attr architrave				= case noMaterials  || materials && noModel: "#E8DCC5" else: MaterialColor
@Group("Colors",9)
attr frieze					= case noMaterials  || materials && noModel: "#EBD8B5" else: MaterialColor
@Group("Colors",9)
attr metopes				= case noMaterials  || materials && noModel: "#EBD8B5" else: MaterialColor
@Group("Colors",9)
attr triglyph				= case noMaterials  || materials && noModel: "#B5B59F" else: MaterialColor
@Group("Colors",9)
attr cornice				= case noMaterials  || materials && noModel: "#C9C0AD" else: MaterialColor
@Group("Colors",9)@Range("#A8763D", "#ff6600",  "#9E4F0E", "#B56A00", "#A3650D", "#AB6118")
attr roof					= case noMaterials  || materials && noModel: 15% : "#A8763D" 15% : "#9E4F0E" 15% : "#B56A00" 15% : "#A3650D" else : "#AB6118" else: MaterialColor
@Group ("Colors",9)
attr floor					= case noMaterials  || materials && noModel: "#A68F74" else: MaterialColor
@Group ("Colors",9)
attr ground					= case noMaterials  || materials && noModel: "#ADB38F" else: MaterialColor


const construction_color	= "#F7EB9E" 
const brick_color			= "#705C46" 
const travertine_color		= "#E2E8D1" 
const marble_color			= "#F79E9E"

const blue					= "#0066FF"
const red					= "#FF3300"
const green					= "#33CC33"
const pink					= "#FF6699"
const cyan					= "#00FFFF"
const purple				= "#6600CC"
const orange				= "#FF9900"

////////////
///////START

Lot -->
//t(0,elevation,0)
//Lot.

///*
case !noModel:
	t(0,elevation,0)
	Base
	t(0,baseHeight-extra_steps_down*step_height, 0)
	InnerOffset
	extrude(world.y, groundFloorHeight + upperFloorHeight)
	Mass
else: NIL
///*/	
Mass -->
case republican:
	color(wall)
	split(y){groundFloorHeight : GroundFloor| ~1 : NIL}
else:
	color(wall)
	split(y){groundFloorHeight : GroundFloor| ~1 : s(scope.sx-aisle_width*2-wallThickness*2,'1,'1) center(x)t(0,-railingH,0)bu.UpperVolume}

///////BASE
	
Base -->
	color(base)
	t(0,-extra_steps_down*step_height,0)
	extrude(baseHeight)
	set(trim.horizontal, true)
	comp(f){front: Stairs | left : BaseWall  |right:  BaseWall |back: BaseBack}	

BaseBack -->
	case back_entrance == "true": Stairs
	else: BaseWall

BaseWall -->
	tex.Block("wall", tile)

Stairs -->
case showSteps == "true":
	alignScopeToAxes(y)
	set(trim.vertical, true)
	split(y){~step_height :  extrude((split.total - split.index) * step_depth) Step}*
else: BaseWall

Step -->
	tex.Block("wall", tile)	
	
///////GROUND FLOOR

GroundFloor -->
case republican:
	split(y){columnHeight: s('1,'1,scope.sz-porch_depth)
						comp(f)	{front: t(0,0,porch_depth)FrontColonnade  
											t(0,0,-porch_depth-wallThickness)
											s(scope.sx-wallThickness*2,scope.sy+entablatureH-.1,'1)
											center(x)
											split(y){~1:split(x){~1:Wall|columnSpacing:Entrance(scope.sx)|~1:Wall}
													|entablatureH:Wall
													}
									|back: BackEntrance
									|side: s(scope.sx-column_diameter*2,'1,'1)center(x)Wall
									|bottom: s('1,scope.sy+porch_depth,'1)t(0,-porch_depth,0)reverseNormals color(floor)tex.Block("floor",.5)
									}
			|entablatureH: comp(f){side:col.Entablature(columnSpacing,column_diameter)
									|top:offset(-aisle_width-wallThickness)
											comp(f){border: Ceiling
													|inside: InnerCeiling.
													}}
			|~1: comp(f){side:Railing}}
else:
	split(y){columnHeight:comp(f)	{side:  s(scope.sx-col.archColumnBaseW,'1,'1)center(x)col.ArcadeStart
									|bottom: reverseNormals color(floor)tex.Block("floor",.5)
									}
			|entablatureH: comp(f){side:col.Entablature(columnSpacing,column_diameter)
								  |top:offset(-aisle_width*2-wallThickness)
									   comp(f){border: Ceiling
											 |inside: extrude(upperFloorHeight)
													  split(y){upper_column_height+upper_baseWall+upperEntablatureH:comp(f){side: split(x){~1:Wall|archWidth:Entrance(scope.sx)|~1:Wall}}
															|~1: comp(f){side:UpperWindows |top: Roof}
															}
															
										  }
								  }
			|~1: comp(f){side:Wall}
			}

FrontColonnade -->
case noFrontColonnade == "true": NIL
else: col.FirstLastFlush(columnSpacing)
				
BackEntrance -->
case back_entrance == "true":

	col.FirstLastFlush(columnSpacing) 
	t(0,0,-porch_depth)
	s(scope.sx-wallThickness*2,scope.sy+entablatureH-.1,'1)
	center(x)
	split(y){~1:split(x){~1:Wall|columnSpacing:Entrance(scope.sx)|~1:Wall}
			|entablatureH:Wall
			}
else: Wall

Ceiling -->
case roofType == "Flat":
color(floor) tex.Block("floor",.5)
reverseNormals
color(roof) tex.Block("roof",4,24)	
else:
OuterRoof

InnerCeiling -->
case scope.sy >aisle_width*2 && republican:
	split(y){aisle_width: Ceiling|~1:NIL|aisle_width: Ceiling}
case scope.sy <=aisle_width*2 && republican: NIL
else: offset(-aisle_width,border) Ceiling

Railing -->
case roofType == "Flat": Wall
else: NIL

///////INNER VOLUME
InnerOffset -->
case republican: 
		offset(-aisle_width-wallThickness,inside)Inner
else: offset(-aisle_width-wallThickness,inside)
		InnerVolume

Inner -->
case scope.sz>aisle_width*2:
//	s('1,'1, scope.sz-aisle_width*2)
//	center(z) 
	InnerVolume
	
else: InnerVolume

InnerVolume -->
case republican && showInterior == "true":
	extrude(groundFloorHeight+upperFloorHeight)
	color(wall)
	split(y){columnHeight: comp(f){	front:col.FirstFlushNoLast(columnSpacing)
									|side:col.FirstFlushNoLast(columnSpacing)}
			|entablatureH: comp(f){side:col.Entablature(columnSpacing, column_diameter)}
			|~1:bu.UpperVolume}
case republican && showInterior == "false":
	extrude(groundFloorHeight+upperFloorHeight)
	color(wall)
	split(y){columnHeight+entablatureH: NIL
			|~1:bu.UpperVolume}
else:	
	extrude(groundFloorHeight+upperFloorHeight)
	color(wall)
	split(y){columnHeight: comp(f){	side: split(x){~1:Wall|archWidth:Entrance(scope.sx)|~1:Wall}}
			|entablatureH: comp(f){side:col.Entablature(columnSpacing, column_diameter)}
			|~1:NIL}					


///////WALLS

Wall -->
	extrude (-wallThickness)
	tex.Block("wall", tile)
	
Wall(thickness) --> 	
	s('1,'1,thickness) t(0,0,'-1) i("builtin:cube")
	tex.Block("wall", tile)


///////DOOR

Entrance(x) --> 
	t(0,0,- step_depth *0.2) 
	split(y){ step_height *0.5    : t(0,0,step_depth*0.5) Wall( wallThickness+step_depth) 
			| ~1			  			: split(x){ entranceFrameW : Wall | ~1 : DoorMain(x) | entranceFrameW : Wall } 
			| entranceFrameW 			: Wall  
			}

DoorMain(x) -->  
	color(wood)
	t(0,0,-wallThickness*0.15) 
	split(y){ ~1          : split(x){ doorFrameW : DoorFrame(wallThickness*0.8) | ~1 : Door | doorFrameW : DoorFrame(wallThickness*0.8) } 
			| doorFrameH  : Wall(wallThickness*0.8) DoorCornice }

Door --> 
case showInterior == "false":
	s('1,'1,doorD) 
	t(0,0,'-1) 
	i(tex.doorAsset)
	tex.Block("wood")
else: NIL
	
DoorFrame(thickness)-->
	s('1,'1,thickness) 
	t(0,0,'-1) 
	i("builtin:cube")
	tex.Block("wood")

DoorCornice -->	
	s('1,'1,.2) 
	i(tex.doorCorniceAsset)
	tex.Block("wood")
	
///////WINDOWS

UpperWindows -->
case republican:
split(x){~columnSpacing:t(column_diameter,0,0)s(scope.sx-column_diameter,'1,'1)WindowWall
			|{~columnSpacing:WindowWall}*
			|~columnSpacing:s(scope.sx-column_diameter,'1,'1)WindowWall}
else: 
split(x){~archWidth:WindowWall
			|{~archWidth:WindowWall}*
			|~archWidth:WindowWall}
			
WindowWall -->
	split(x){~1: Wall
			|col.orderW: split(y){~1: Wall
									  |~1: t(0,0,(-wallThickness+column_diameter)/2)color(wood)Window.
									  |~1: Wall}
			|~1: Wall}


///////ROOf

Roof -->
	roofGable(roof_angle, 1)
	Roof1

OuterRoof -->
	roofShed (roof_angle)
	comp(f){top:  color(roof) rf.Roof(roofBrickW,roofBrickH)|bottom: tex.Block("wall")}
	
Roof1 -->
	comp(f){bottom: NIL|vertical: Wall|top:  color(roof) rf.Roof(roofBrickW,roofBrickH)}


style Comitium_2
attr YEAR = -160.0
attr porch_depth = 4.0
attr steps = 4.0
attr column_diameter = 0.7


style Comitium_1
attr YEAR = 0.0
attr porch_depth = 4.0
attr steps = 4.0
attr column_diameter = 0.7
